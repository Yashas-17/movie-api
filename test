const express = require('express')
const app = express()
app.use(express.json())
const path = require('path')
const dbPath = path.join(__dirname, 'moviesData.db')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
let db = null
const initializeDbAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server running on 3000.....')
    })
  } catch (e) {
    console.log(`error ${e.message}`)
    process.exit(1)
  }
}
initializeDbAndServer()

app.get('/movies/', async (request, response) => {
  const getQuery = `
  SELECT * FROM movie
  `
  const moviesArray = await db.all(getQuery)
  //console.log(moviesList)
  response.send(
    moviesArray.map(eachMovie => ({movieName: eachMovie.movie_name})),
  )
})

app.get('/movies/:movieId/', async (request, response) => {
  try {
    const {movieId} = request.params

    // Use parameterized query to prevent SQL injection
    const getQuery = `SELECT * FROM movie WHERE movie_id = ?`
    const requestedMovie = await db.get(getQuery, [movieId])

    if (requestedMovie) {
      response.send({
        movieId: requestedMovie.movie_id,
        directorId: requestedMovie.director_id,
        movieName: requestedMovie.movie_name,
        leadActor: requestedMovie.lead_actor,
      })
    } else {
      response.status(404).send({error: 'Movie not found'})
    }
  } catch (error) {
    console.error('Database error: ', error)
    response.status(500).send(`Error ${error.message}`)
  }
})

app.post('/movies/', async (request, response) => {
  const {directorId, movieName, leadActor} = request.body
  const addMoviesQuery = `
  INSERT INTO movie (director_id,movie_name,lead_actor)
  VALUES (${directorId},'${movieName}','${leadActor}')
  
  `

  const dbResponse = await db.run(addMoviesQuery)
  const movieId = dbResponse.lastId
  response.send('Movie Successfully Added')
})

app.put('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const {directorId, movieName, leadActor} = request.body
  const putQuery = `UPDATE movie 
  SET 
    director_id=${directorId},
    movie_name='${movieName}',
    lead_actor='${leadActor}'
  WHERE movie_id=${movieId}
  `
  await db.run(putQuery)
  response.send('Movie Details Updated')
})

app.delete('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const deleteQuery = `DELETE FROM movie WHERE movie_id=${movieId}`
  await db.run(deleteQuery)
  response.send('Movie Removed')
})

app.get('/directors/', async (request, response) => {
  const getDirectors = `SELECT * FROM director`
  const directorsList = await db.all(getDirectors)
  //console.log(directorsList)
  response.send(
    directorsList.map(eachDirector => {
      return {
        directorId: eachDirector.director_id,
        directorName: eachDirector.director_name,
      }
    }),
  )
})

app.get('/directors/:directorId/movies/', async (request, response) => {
  const {directorId} = request.params
  const getQuery = `SELECT * FROM movie WHERE director_id= ?`
  const moviesList = await db.all(getQuery, [directorId])
  if (moviesList !== null) {
    response.send(
      moviesList.map(eachMovie => {
        return {
          movieName: eachMovie.movie_name,
        }
      }),
    )
  } else {
    response.status(404).send({Error: 'Movie not found'})
  }
})
module.exports = app
